#!/usr/bin/env python

import glob
import re
from argparse import ArgumentParser
import os, sys, datetime
import subprocess
from os.path import dirname, abspath

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class SpatialArgumentParser(ArgumentParser):
  
  def print_help(self, file=None):
    print("""
Spatial
Usage: spatial <app> [options]

Help:
  -h, --help            Prints this usage text

Verbosity:
  -q, --quiet           Disable all logging and printing
  -v, --verbose         Enable logging
  --vv                  Enable verbose logging

Output:
  -c, --clean           Reset output directory
  -o, --out <value>     Location of output directory. [./gen/<appname>]
  -d, --detail <value>  Dot graph detail (0: control only, 1: all nodes) [1]

DSE:
  --dse                 Enables design space exploration [false]
  --threads <value>     Sets number of threads to use in DSE
  --bruteforce          Enables bruteforce DSE
  --heuristic           Enables heuristic DSE
  --nonaming            Disables the debug name for all syms, using "x${s.id}" only'

Backends:
  --fpga <value>        Sets name of FPGA target [Default]
  --sim                 Enables codegen to Scala (disables retiming by default) [false]
  --synth               Enables codegen to chisel + cpp (Synthesis) [true]
  --dot                 Enables dot graph generation
  --retime              Force retiming for --sim
  --noretime            Disables retiming for all targets
  --multifile <value>   Sets file splitting [4]:
                          0: <DEPRECATED> no splitting or scoping
                          1: <DEPRECATED> no splitting but yes scoping on inner pipes
                          2: <DEPRECATED> no splitting but yes scoping everywhere
                          3: <DEPRECATED> splitting for inner pipes only
                          4: all blocks
                          5: java class file compression
                          6: <EXPERIMENTAL, UNSTABLE> further compression

Experimental:
  --asyncMem            Enables asynchronous memories
  --instrument          Enables counters for each loop to assist in balancing pipelines
  --tightControl        Enables tighter timing between controllers at the expense of potentially failing timing
  --cheapFifos          Enables cheap fifos; accesses must be multiples of each other and not have lane-enables
  --runtime             Enables application runtime estimation
      """)
  #sys.exit(0)


def getSrcCode(app, args):
  outdir = "gen/%s" % app 
  for arg in args:
    if ("--out=" in arg):
      outdir = arg.replace("--out=","")

  src = getFullyQualifiedSourceName(app)
  
  outfile = open(os.path.join(os.getcwd(), './%s/%s.ref' % (outdir, app)), 'w+')
  found = False
  f = open( src, 'r' )
  for line in f:
    if re.match(".*%s[ ]*{" % app, line) is not None:
      found = True
    if (found):
      outfile.write(line)
    if (found and re.match("^}.*", line) is not None):
      found = False
  outfile.close()


def getFullyQualifiedSourceName(app):
  path_cmd = "grep -rEl 'class.*%s.*{|object.*%s.*{'" % (app,app)
  p = subprocess.Popen(path_cmd, stdout=subprocess.PIPE, shell=True)
  p.wait()
  paths = []
  while True:
    path = p.stdout.readline().rstrip()
    if path == b'': break
    else:
      paths.append(path)

  path = ""
  if len(paths) == 1:
    path = paths[0].decode("utf-8")
  elif len(paths) == 0:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] No source files found for " + app + ".\n")
    exit(1)
  else:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Ambiguous source files found for " + app + ".\n")
    for path in paths:
      print(path + "\n")
    exit(1)
  
  return path


def getFullyQualifiedClassName(app, errorIfNone):
  path_cmd = "find ./ -name '" + app + ".class'"
  p = subprocess.Popen(path_cmd, stdout=subprocess.PIPE, shell=True)
  p.wait()
  paths = []
  while True:
    path = p.stdout.readline().rstrip()
    if path == b'':
      break
    else:
      paths.append(path)

  path = ""
  found = False

  if len(paths) == 1:
    path = paths[0].decode("utf-8")
    found = True
  elif len(paths) == 0 and errorIfNone:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] No class found for application with name " + app + ".\n")
    exit(1)
  elif len(paths) > 1:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Ambiguous classes found for " + app + ".\n")
    for path in paths:
      print(path + "\n")
    exit(1)



  name = path.replace("/", ".")
  isTest = path.find("test-classes") > 0

  classPos = name.find("classes.")
  #print("classPos: " + str(classPos))
  if classPos >= 0:
    name = name[(classPos+8):]
  name = name[:(len(name)-6)]

  return name, isTest, found


def main():
  parser = SpatialArgumentParser()
  parser.add_argument('app', type=str, help='name of application to run')

  sbt_project = 'apps/'

  (opts, args) = parser.parse_known_args()

  ecode = os.system("sbt \"; project apps; compile\"")
  if ecode != 0: exit(1)
  ecode = os.system("sbt test:compile")
  if ecode != 0: exit(1)

  name, isTest, found = getFullyQualifiedClassName(app=opts.app, errorIfNone=True)

  java_cmd = ""
  if isTest:
    ciArgs = "export TEST_ARGS=\"--name " + opts.app + " " + ' '.join(args) + "\""
    java_cmd = ciArgs + "; sbt -batch -Dci=true \"; testOnly " + name + "\""
  else:
    java_cmd = "sbt -batch \"" + sbt_project + "runMain " + name + " --name " + opts.app + " " + ' '.join(args) + "\""

  print(java_cmd)

  ecode = os.system(java_cmd)

  if ecode != 0:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Spatial compilation failed")
  else:
    # if not any("--withoutSrc" in s for s in args):
    #   getSrcCode(opts.app, args)
    simScript = open(opts.app + ".sim", 'w')
    simScript.write("#!/bin/bash\n\n")
    simScript.write("cd gen/" + opts.app + "\n")
    simScript.write("bash run.sh \"$@\"\n") 
    simScript.close()

    os.system("chmod u+x " + opts.app + ".sim")

if __name__ == "__main__":
    main()
